{"version":3,"sources":["components/CharacterCard/index.js","components/Wrapper/index.js","components/Header/index.js","App.js","index.js"],"names":["CharacterCard","props","className","onClick","click","id","alt","name","src","image","Wrapper","children","Header","score","hiScore","App","state","characters","randomize","i","length","j","Math","floor","random","temp","reset","map","character","isClicked","handleCorrectGuess","newCharacter","newScore","newHiScore","max","setState","handleIncorrectGuess","alert","guessedCorrectly","clicked","this","key","Component","ReactDOM","render","document","getElementById"],"mappings":"wxCAaeA,MAVf,SAAuBC,GACnB,OACI,yBAAKC,UAAU,OAAOC,QAAS,kBAAMF,EAAMG,MAAMH,EAAMI,MACnD,yBAAKH,UAAU,iBACX,yBAAKI,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,W,aCAlCC,MAJf,SAAiBT,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMU,W,MCI1BC,MALf,SAAgBX,GACd,OAAO,gCAAQ,yBAAKC,UAAU,YAAYI,IAAI,SAASE,IAAI,uBAC3D,yBAAKN,UAAU,SAAf,UAA+BD,EAAMY,OAAY,yBAAKX,UAAU,WAAf,aAAoCD,EAAMa,W,6jBC6F9EC,E,2MAzFbC,MAAQ,CACNC,aACAJ,MAAO,EACPC,QAAS,G,EAQXI,UAAY,SAAAD,GAEV,IADA,IAAIE,EAAIF,EAAWG,OAAS,EACrBD,EAAI,GAAG,CACZ,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCM,EAAOR,EAAWE,GACxBF,EAAWE,GAAKF,EAAWI,GAC3BJ,EAAWI,GAAKI,EAChBN,IAEF,OAAOF,G,EAITS,MAAQ,SAAAT,GACN,IAAMS,EAAQT,EAAWU,KAAI,SAAAC,GAAS,YAAUA,EAAV,CAAqBC,WAAW,OACtE,OAAO,EAAKX,UAAUQ,I,EAIxBI,mBAAqB,SAAAC,GAAiB,IAAD,EACR,EAAKf,MAAxBF,EAD2B,EAC3BA,QACFkB,EAF6B,EAClBnB,MACQ,EACnBoB,EAAaX,KAAKY,IAAIF,EAAUlB,GAEtC,EAAKqB,SAAS,CACZlB,WAAY,EAAKC,UAAUa,GAC3BlB,MAAOmB,EACPlB,QAASmB,K,EAKbG,qBAAuB,SAAAnB,GACrB,EAAKkB,SAAS,CACZlB,WAAY,EAAKS,MAAMT,GACvBJ,MAAO,IAETwB,MAAM,qD,EAGRjC,MAAQ,SAAAC,GACN,IAAIiC,GAAmB,EACjBP,EAAe,EAAKf,MAAMC,WAAWU,KAAI,SAAAC,GAC7C,IAAMG,EAAY,KAAQH,GAO1B,OANIG,EAAa1B,KAAOA,IACjB0B,EAAaQ,UAChBR,EAAaQ,SAAU,EACvBD,GAAmB,IAGhBP,KAETO,EACI,EAAKR,mBAAmBC,GACxB,EAAKK,qBAAqBL,I,mFA1D9BS,KAAKL,SAAS,CAAElB,WAAYuB,KAAKtB,UAAUsB,KAAKxB,MAAMC,gB,+BA6D9C,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAQJ,MAAO2B,KAAKxB,MAAMH,MAAOC,QAAS0B,KAAKxB,MAAMF,UACpD0B,KAAKxB,MAAMC,WAAWU,KAAI,SAAAC,GAAS,OAClC,kBAAC,EAAD,CACEa,IAAKb,EAAUvB,GACfA,GAAIuB,EAAUvB,GACdE,KAAMqB,EAAUrB,KAChBE,MAAOmB,EAAUnB,MACjBL,MAAO,EAAKA,gB,GAhFNsC,aCFlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.3202f215.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./style.css\"\r\n\r\nfunction CharacterCard(props) {\r\n    return (\r\n        <div className=\"card\" onClick={() => props.click(props.id)}>\r\n            <div className=\"img-container\">\r\n                <img alt={props.name} src={props.image} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CharacterCard;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from 'react';\r\nimport \"./style.css\"\r\n\r\nfunction Header(props) {\r\n  return <header><img className=\"imgHeader\" alt=\"header\" src=\"/images/header.jpg\"></img>\r\n  <div className=\"score\">Score: {props.score}</div><div className=\"hiScore\">Hi Score: {props.hiScore}</div></header>;\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport CharacterCard from './components/CharacterCard';\nimport characters from './images.json'\nimport Wrapper from './components/Wrapper';\nimport Header from './components/Header';\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    characters,\n    score: 0,\n    hiScore: 0,\n  };\n\n  componentDidMount() {\n    this.setState({ characters: this.randomize(this.state.characters) });\n  }\n\n  //randomize characters\n  randomize = characters => {\n    let i = characters.length - 1;\n    while (i > 0) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = characters[i];\n      characters[i] = characters[j];\n      characters[j] = temp;\n      i--;\n    }\n    return characters;\n  };\n\n  //reset function for when you click incorrectly\n  reset = characters => {\n    const reset = characters.map(character => ({ ...character, isClicked: false }));\n    return this.randomize(reset);\n  };\n\n  //when guessing correctly\n  handleCorrectGuess = newCharacter => {\n    const { hiScore, score } = this.state;\n    const newScore = score + 1;\n    const newHiScore = Math.max(newScore, hiScore);\n\n    this.setState({\n      characters: this.randomize(newCharacter),\n      score: newScore,\n      hiScore: newHiScore\n    });\n  };\n\n  //function for when you click the same image twice\n  handleIncorrectGuess = characters => {\n    this.setState({\n      characters: this.reset(characters),\n      score: 0\n    });\n    alert(\"You clicked the same image! Game over try again!\");\n  };\n\n  click = id => {\n    let guessedCorrectly = false;\n    const newCharacter = this.state.characters.map(character => {\n      const newCharacter = { ...character };\n      if (newCharacter.id === id) {\n        if (!newCharacter.clicked) {\n          newCharacter.clicked = true;\n          guessedCorrectly = true;\n        }\n      }\n      return newCharacter;\n    });\n    guessedCorrectly\n      ? this.handleCorrectGuess(newCharacter)\n      : this.handleIncorrectGuess(newCharacter);\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        <Header score={this.state.score} hiScore={this.state.hiScore}></Header>\n        {this.state.characters.map(character => (\n          <CharacterCard\n            key={character.id}\n            id={character.id}\n            name={character.name}\n            image={character.image}\n            click={this.click}\n          />\n        )\n        )\n        }\n      </Wrapper>\n    );\n  }\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}